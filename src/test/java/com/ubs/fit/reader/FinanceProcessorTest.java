package com.ubs.fit.reader;

import com.ubs.fit.model.CompanyFinancialDTO;
import com.ubs.fit.util.FileReaderUtil;
import lombok.SneakyThrows;
import org.junit.Before;
import org.junit.Test;

import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static org.junit.Assert.assertEquals;

public class FinanceProcessorTest {
    String FILE_PATH="src/test/resources/FILE.DAT.txt";
    List<CompanyFinancialDTO> companyFinancialDTOList;
    Map<String,Double> currencyValueMap;
    Map<String,Double> getCurrencyValueMapping(){
        return currencyValueMap;
    }
    @Before
    @SneakyThrows
    public void setUp(){
        currencyValueMap=new HashMap<>();
        currencyValueMap.put("GBP",1.654);
        currencyValueMap.put("CHF",1.10);
        currencyValueMap.put("EUR",1.35);
        companyFinancialDTOList=new FinanceProcessor().getCompanyDetailsList(FILE_PATH);
    }


    //testing the number of records generated by the parsing the file
    @SneakyThrows
    @Test
    public void testGetCompanyDetailsList(){
        try (Stream<String> fileStream = Files.lines(Paths.get(FILE_PATH))) {
            int noOfLines = (int) fileStream.count()-1; // excluding the header
            FinanceProcessor financeProcessor=new FinanceProcessor();
            assertEquals(companyFinancialDTOList.stream().count(), noOfLines);
        }
    }

    @Test
    public void testGetAverageAmountForCountryCodeNORandRatingA(){
        String countryCode="NOR";
        String rating="A";
        Map<String, Map<String, BigDecimal>> map = companyFinancialDTOList.stream()
                .collect(Collectors.groupingBy(CompanyFinancialDTO::getCountry,
                        Collectors.groupingBy(CompanyFinancialDTO::getCreditRating,Collectors.mapping(CompanyFinancialDTO::getAmount, Collector.of(IntermediateResult::new, IntermediateResult::add, IntermediateResult::combine, IntermediateResult::finish)))));
        Map<String, Map<String, BigDecimal>> mapCountryRating=new FinanceProcessor().getGroupingByCountryAndRating(companyFinancialDTOList);
        System.out.println(mapCountryRating);
        System.out.println(map);
        assertEquals(mapCountryRating.get("NOR").get("A"),map.get("NOR").get("A"));
    }
}
